{"ast":null,"code":"var _jsxFileName = \"D:\\\\Daniyal khan\\\\React\\\\Runmator_Dashboard\\\\src\\\\components\\\\MDSnackbar\\\\index.js\",\n    _s = $RefreshSig$();\n\n/**\n=========================================================\n*  \n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/material-dashboard-react\n* Copyright 2021 Creative Tim (https://www.creative-tim.com)\n\nCoded by www.creative-tim.com\n\n =========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n*/\n// prop-types is a library for typechecking of props\nimport PropTypes from \"prop-types\"; // @mui material components\n\nimport Snackbar from \"@mui/material/Snackbar\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Icon from \"@mui/material/Icon\";\nimport Divider from \"@mui/material/Divider\";\nimport Fade from \"@mui/material/Fade\"; // Material Dashboard 2 React components\n\nimport MDBox from \"components/MDBox\";\nimport MDTypography from \"components/MDTypography\"; // Custom styles for the MDSnackbar\n\nimport MDSnackbarIconRoot from \"components/MDSnackbar/MDSnackbarIconRoot\"; // Material Dashboard 2 PRO React context\n\nimport { useMaterialUIController } from \"context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction MDSnackbar(_ref) {\n  _s();\n\n  let {\n    color,\n    icon,\n    title,\n    dateTime,\n    content,\n    close,\n    bgWhite,\n    ...rest\n  } = _ref;\n  const [controller] = useMaterialUIController();\n  const {\n    darkMode\n  } = controller;\n  let titleColor;\n  let dateTimeColor;\n  let dividerColor;\n\n  if (bgWhite) {\n    titleColor = color;\n    dateTimeColor = \"dark\";\n    dividerColor = false;\n  } else if (color === \"light\") {\n    titleColor = darkMode ? \"inherit\" : \"dark\";\n    dateTimeColor = darkMode ? \"inherit\" : \"text\";\n    dividerColor = false;\n  } else {\n    titleColor = \"white\";\n    dateTimeColor = \"white\";\n    dividerColor = true;\n  }\n\n  return /*#__PURE__*/_jsxDEV(Snackbar, {\n    TransitionComponent: Fade,\n    autoHideDuration: 5000,\n    anchorOrigin: {\n      vertical: \"bottom\",\n      horizontal: \"right\"\n    },\n    ...rest,\n    action: /*#__PURE__*/_jsxDEV(IconButton, {\n      size: \"small\",\n      \"aria-label\": \"close\",\n      color: \"inherit\",\n      onClick: close,\n      children: /*#__PURE__*/_jsxDEV(Icon, {\n        fontSize: \"small\",\n        children: \"close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this),\n    children: /*#__PURE__*/_jsxDEV(MDBox, {\n      variant: bgWhite ? \"contained\" : \"gradient\",\n      bgColor: bgWhite ? \"white\" : color,\n      minWidth: \"21.875rem\",\n      maxWidth: \"100%\",\n      shadow: \"md\",\n      borderRadius: \"md\",\n      p: 1,\n      sx: {\n        backgroundColor: _ref2 => {\n          let {\n            palette\n          } = _ref2;\n          return darkMode ? palette.background.card : palette[color] || palette.white.main;\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(MDBox, {\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n        color: \"dark\",\n        p: 1.5,\n        children: [/*#__PURE__*/_jsxDEV(MDBox, {\n          display: \"flex\",\n          alignItems: \"center\",\n          lineHeight: 0,\n          children: [/*#__PURE__*/_jsxDEV(MDSnackbarIconRoot, {\n            fontSize: \"small\",\n            ownerState: {\n              color,\n              bgWhite\n            },\n            children: icon\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MDTypography, {\n            variant: \"button\",\n            fontWeight: \"medium\",\n            color: titleColor,\n            textGradient: bgWhite,\n            children: title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MDBox, {\n          display: \"flex\",\n          alignItems: \"center\",\n          lineHeight: 0,\n          children: [/*#__PURE__*/_jsxDEV(MDTypography, {\n            variant: \"caption\",\n            color: dateTimeColor,\n            children: dateTime\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Icon, {\n            sx: {\n              color: _ref3 => {\n                let {\n                  palette: {\n                    dark,\n                    white\n                  }\n                } = _ref3;\n                return bgWhite && !darkMode || color === \"light\" ? dark.main : white.main;\n              },\n              fontWeight: _ref4 => {\n                let {\n                  typography: {\n                    fontWeightBold\n                  }\n                } = _ref4;\n                return fontWeightBold;\n              },\n              cursor: \"pointer\",\n              marginLeft: 2,\n              transform: \"translateY(-1px)\"\n            },\n            onClick: close,\n            children: \"close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {\n        sx: {\n          margin: 0\n        },\n        light: dividerColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MDBox, {\n        p: 1.5,\n        sx: {\n          fontSize: _ref5 => {\n            let {\n              typography: {\n                size\n              }\n            } = _ref5;\n            return size.sm;\n          },\n          color: _ref6 => {\n            let {\n              palette: {\n                white,\n                text\n              }\n            } = _ref6;\n            let colorValue = bgWhite || color === \"light\" ? text.main : white.main;\n\n            if (darkMode) {\n              colorValue = color === \"light\" ? \"inherit\" : white.main;\n            }\n\n            return colorValue;\n          }\n        },\n        children: content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n} // Setting default values for the props of MDSnackbar\n\n\n_s(MDSnackbar, \"s0n8bwZXGOuz7un3Pl1FvVzqqsQ=\", false, function () {\n  return [useMaterialUIController];\n});\n\n_c = MDSnackbar;\nMDSnackbar.defaultProps = {\n  bgWhite: false,\n  color: \"info\"\n}; // Typechecking props for MDSnackbar\n\nMDSnackbar.propTypes = {\n  color: PropTypes.oneOf([\"primary\", \"secondary\", \"info\", \"success\", \"warning\", \"error\", \"dark\", \"light\"]),\n  icon: PropTypes.node.isRequired,\n  title: PropTypes.string.isRequired,\n  dateTime: PropTypes.string.isRequired,\n  content: PropTypes.node.isRequired,\n  close: PropTypes.func.isRequired,\n  bgWhite: PropTypes.bool\n};\nexport default MDSnackbar;\n\nvar _c;\n\n$RefreshReg$(_c, \"MDSnackbar\");","map":{"version":3,"sources":["D:/Daniyal khan/React/Runmator_Dashboard/src/components/MDSnackbar/index.js"],"names":["PropTypes","Snackbar","IconButton","Icon","Divider","Fade","MDBox","MDTypography","MDSnackbarIconRoot","useMaterialUIController","MDSnackbar","color","icon","title","dateTime","content","close","bgWhite","rest","controller","darkMode","titleColor","dateTimeColor","dividerColor","vertical","horizontal","backgroundColor","palette","background","card","white","main","dark","fontWeight","typography","fontWeightBold","cursor","marginLeft","transform","margin","fontSize","size","sm","text","colorValue","defaultProps","propTypes","oneOf","node","isRequired","string","func","bool"],"mappings":"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","sourcesContent":["/**\n=========================================================\n*  \n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/material-dashboard-react\n* Copyright 2021 Creative Tim (https://www.creative-tim.com)\n\nCoded by www.creative-tim.com\n\n =========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n*/\n\n// prop-types is a library for typechecking of props\nimport PropTypes from \"prop-types\";\n\n// @mui material components\nimport Snackbar from \"@mui/material/Snackbar\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Icon from \"@mui/material/Icon\";\nimport Divider from \"@mui/material/Divider\";\nimport Fade from \"@mui/material/Fade\";\n\n// Material Dashboard 2 React components\nimport MDBox from \"components/MDBox\";\nimport MDTypography from \"components/MDTypography\";\n\n// Custom styles for the MDSnackbar\nimport MDSnackbarIconRoot from \"components/MDSnackbar/MDSnackbarIconRoot\";\n\n// Material Dashboard 2 PRO React context\nimport { useMaterialUIController } from \"context\";\n\nfunction MDSnackbar({ color, icon, title, dateTime, content, close, bgWhite, ...rest }) {\n  const [controller] = useMaterialUIController();\n  const { darkMode } = controller;\n\n  let titleColor;\n  let dateTimeColor;\n  let dividerColor;\n\n  if (bgWhite) {\n    titleColor = color;\n    dateTimeColor = \"dark\";\n    dividerColor = false;\n  } else if (color === \"light\") {\n    titleColor = darkMode ? \"inherit\" : \"dark\";\n    dateTimeColor = darkMode ? \"inherit\" : \"text\";\n    dividerColor = false;\n  } else {\n    titleColor = \"white\";\n    dateTimeColor = \"white\";\n    dividerColor = true;\n  }\n\n  return (\n    <Snackbar\n      TransitionComponent={Fade}\n      autoHideDuration={5000}\n      anchorOrigin={{\n        vertical: \"bottom\",\n        horizontal: \"right\",\n      }}\n      {...rest}\n      action={\n        <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={close}>\n          <Icon fontSize=\"small\">close</Icon>\n        </IconButton>\n      }\n    >\n      <MDBox\n        variant={bgWhite ? \"contained\" : \"gradient\"}\n        bgColor={bgWhite ? \"white\" : color}\n        minWidth=\"21.875rem\"\n        maxWidth=\"100%\"\n        shadow=\"md\"\n        borderRadius=\"md\"\n        p={1}\n        sx={{\n          backgroundColor: ({ palette }) =>\n            darkMode ? palette.background.card : palette[color] || palette.white.main,\n        }}\n      >\n        <MDBox\n          display=\"flex\"\n          justifyContent=\"space-between\"\n          alignItems=\"center\"\n          color=\"dark\"\n          p={1.5}\n        >\n          <MDBox display=\"flex\" alignItems=\"center\" lineHeight={0}>\n            <MDSnackbarIconRoot fontSize=\"small\" ownerState={{ color, bgWhite }}>\n              {icon}\n            </MDSnackbarIconRoot>\n            <MDTypography\n              variant=\"button\"\n              fontWeight=\"medium\"\n              color={titleColor}\n              textGradient={bgWhite}\n            >\n              {title}\n            </MDTypography>\n          </MDBox>\n          <MDBox display=\"flex\" alignItems=\"center\" lineHeight={0}>\n            <MDTypography variant=\"caption\" color={dateTimeColor}>\n              {dateTime}\n            </MDTypography>\n            <Icon\n              sx={{\n                color: ({ palette: { dark, white } }) =>\n                  (bgWhite && !darkMode) || color === \"light\" ? dark.main : white.main,\n                fontWeight: ({ typography: { fontWeightBold } }) => fontWeightBold,\n                cursor: \"pointer\",\n                marginLeft: 2,\n                transform: \"translateY(-1px)\",\n              }}\n              onClick={close}\n            >\n              close\n            </Icon>\n          </MDBox>\n        </MDBox>\n        <Divider sx={{ margin: 0 }} light={dividerColor} />\n        <MDBox\n          p={1.5}\n          sx={{\n            fontSize: ({ typography: { size } }) => size.sm,\n            color: ({ palette: { white, text } }) => {\n              let colorValue = bgWhite || color === \"light\" ? text.main : white.main;\n\n              if (darkMode) {\n                colorValue = color === \"light\" ? \"inherit\" : white.main;\n              }\n\n              return colorValue;\n            },\n          }}\n        >\n          {content}\n        </MDBox>\n      </MDBox>\n    </Snackbar>\n  );\n}\n\n// Setting default values for the props of MDSnackbar\nMDSnackbar.defaultProps = {\n  bgWhite: false,\n  color: \"info\",\n};\n\n// Typechecking props for MDSnackbar\nMDSnackbar.propTypes = {\n  color: PropTypes.oneOf([\n    \"primary\",\n    \"secondary\",\n    \"info\",\n    \"success\",\n    \"warning\",\n    \"error\",\n    \"dark\",\n    \"light\",\n  ]),\n  icon: PropTypes.node.isRequired,\n  title: PropTypes.string.isRequired,\n  dateTime: PropTypes.string.isRequired,\n  content: PropTypes.node.isRequired,\n  close: PropTypes.func.isRequired,\n  bgWhite: PropTypes.bool,\n};\n\nexport default MDSnackbar;\n"]},"metadata":{},"sourceType":"module"}