{"ast":null,"code":"var _jsxFileName = \"D:\\\\Daniyal khan\\\\React\\\\Runmator_Dashboard\\\\src\\\\components\\\\EditServiceModal.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport Button from \"@mui/material/Button\";\nimport TextField from \"@mui/material/TextField\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogContentText from \"@mui/material/DialogContentText\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport MDTypography from \"./MDTypography\";\nimport { toast } from \"react-toastify\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function EditServiceModal(_ref) {\n  _s();\n\n  let {\n    isModalVisible,\n    setIsModalVisible,\n    onSubmit,\n    selectedItem,\n    isLoading,\n    title\n  } = _ref;\n  const [imageFile, setImageFile] = useState(null);\n  const [imageResult, setImageResult] = useState(\"\");\n  const [newText, setNewText] = useState(selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.services_name);\n\n  const handleClickOpen = () => {\n    setIsModalVisible(true);\n  };\n\n  const handleClose = () => {\n    setImageFile(null);\n    setNewText(\"\");\n    setIsModalVisible(false);\n  };\n\n  const onImageChange = event => {\n    var _event$target$files$;\n\n    let fileSize = (_event$target$files$ = event.target.files[0]) === null || _event$target$files$ === void 0 ? void 0 : _event$target$files$.size;\n    let fileExtension = event.target.files[0].name.replace(/^.*\\./, \"\");\n\n    if (fileExtension !== \"png\" && fileExtension !== \"jpg\") {\n      toast.info(\"Not an image file.\");\n    } else if (fileSize > 2097152) {\n      toast.info(\"Image size should be less than 2MBs.\");\n    } else {\n      if (event.target.files[0]) {\n        let img = event.target.files[0];\n        setImageFile(img);\n        let reader = new FileReader();\n\n        reader.onload = e => {\n          setImageResult(e.target.result);\n        };\n\n        reader.readAsDataURL(event.target.files[0]);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    color: \"primary\",\n    open: isModalVisible,\n    onClose: handleClose,\n    children: [/*#__PURE__*/_jsxDEV(MDTypography, {\n      fontWeight: \"regular\",\n      color: \"info\",\n      fontWeight: \"medium\",\n      textGradient: true,\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n      children: /*#__PURE__*/_jsxDEV(TextField, {\n        margin: \"dense\",\n        id: \"sname\",\n        value: newText,\n        label: \"Service Name\",\n        onChange: e => setNewText(e.target.value),\n        fullWidth: true,\n        variant: \"standard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upload-section-modal\",\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        id: \"sname\",\n        value: (imageFile === null || imageFile === void 0 ? void 0 : imageFile.name) || (selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.services_icon) || \"Browse icon image file to upload.\",\n        label: \"Service Icon\",\n        disabled: true,\n        variant: \"standard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"edit-modal-upload-button \",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          component: \"label\",\n          children: [\"Upload File\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            hidden: true,\n            onChange: e => onImageChange(e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n      children: isLoading ? /*#__PURE__*/_jsxDEV(MDTypography, {\n        variant: \"button\",\n        fontWeight: \"regular\",\n        display: \"block\",\n        color: \"info\",\n        fontWeight: \"medium\",\n        textGradient: true,\n        children: \"Please Wait\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleClose,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => onSubmit(newText, imageFile),\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n\n_s(EditServiceModal, \"l5P8xzei35b+yWRuB+BKoSQKUQo=\");\n\n_c = EditServiceModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditServiceModal\");","map":{"version":3,"sources":["D:/Daniyal khan/React/Runmator_Dashboard/src/components/EditServiceModal.js"],"names":["React","useEffect","Button","TextField","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","MDTypography","toast","useState","EditServiceModal","isModalVisible","setIsModalVisible","onSubmit","selectedItem","isLoading","title","imageFile","setImageFile","imageResult","setImageResult","newText","setNewText","services_name","handleClickOpen","handleClose","onImageChange","event","fileSize","target","files","size","fileExtension","name","replace","info","img","reader","FileReader","onload","e","result","readAsDataURL","value","services_icon"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport Button from \"@mui/material/Button\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Dialog from \"@mui/material/Dialog\";\r\nimport DialogActions from \"@mui/material/DialogActions\";\r\nimport DialogContent from \"@mui/material/DialogContent\";\r\nimport DialogContentText from \"@mui/material/DialogContentText\";\r\nimport DialogTitle from \"@mui/material/DialogTitle\";\r\nimport MDTypography from \"./MDTypography\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nimport { useState } from \"react\";\r\n\r\nexport default function EditServiceModal({\r\n  isModalVisible,\r\n  setIsModalVisible,\r\n  onSubmit,\r\n  selectedItem,\r\n  isLoading,\r\n  title,\r\n}) {\r\n  const [imageFile, setImageFile] = useState(null);\r\n  const [imageResult, setImageResult] = useState(\"\");\r\n  const [newText, setNewText] = useState(selectedItem?.services_name);\r\n\r\n  const handleClickOpen = () => {\r\n    setIsModalVisible(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setImageFile(null);\r\n    setNewText(\"\");\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  const onImageChange = (event) => {\r\n    let fileSize = event.target.files[0]?.size;\r\n\r\n    let fileExtension = event.target.files[0].name.replace(/^.*\\./, \"\");\r\n\r\n    if (fileExtension !== \"png\" && fileExtension !== \"jpg\") {\r\n      toast.info(\"Not an image file.\");\r\n    } else if (fileSize > 2097152) {\r\n      toast.info(\"Image size should be less than 2MBs.\");\r\n    } else {\r\n      if (event.target.files[0]) {\r\n        let img = event.target.files[0];\r\n        setImageFile(img);\r\n        let reader = new FileReader();\r\n        reader.onload = (e) => {\r\n          setImageResult(e.target.result);\r\n        };\r\n        reader.readAsDataURL(event.target.files[0]);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Dialog color=\"primary\" open={isModalVisible} onClose={handleClose}>\r\n      <MDTypography\r\n        fontWeight=\"regular\"\r\n        color=\"info\"\r\n        fontWeight=\"medium\"\r\n        textGradient\r\n      >\r\n        {title}\r\n      </MDTypography>\r\n\r\n      <DialogContent>\r\n        <TextField\r\n          margin=\"dense\"\r\n          id=\"sname\"\r\n          value={newText}\r\n          label={\"Service Name\"}\r\n          onChange={(e) => setNewText(e.target.value)}\r\n          fullWidth\r\n          variant=\"standard\"\r\n        />\r\n      </DialogContent>\r\n      <div className=\"upload-section-modal\">\r\n        <TextField\r\n          id=\"sname\"\r\n          value={\r\n            imageFile?.name ||\r\n            selectedItem?.services_icon ||\r\n            \"Browse icon image file to upload.\"\r\n          }\r\n          label={\"Service Icon\"}\r\n          disabled={true}\r\n          variant=\"standard\"\r\n        />\r\n        <div className=\"edit-modal-upload-button \">\r\n          <Button variant=\"contained\" component=\"label\">\r\n            Upload File\r\n            <input type=\"file\" hidden onChange={(e) => onImageChange(e)} />\r\n          </Button>\r\n        </div>\r\n      </div>\r\n      <DialogActions>\r\n        {isLoading ? (\r\n          <MDTypography\r\n            variant=\"button\"\r\n            fontWeight=\"regular\"\r\n            display=\"block\"\r\n            color=\"info\"\r\n            fontWeight=\"medium\"\r\n            textGradient\r\n          >\r\n            Please Wait\r\n          </MDTypography>\r\n        ) : (\r\n          <>\r\n            <Button onClick={handleClose}>Cancel</Button>\r\n            <Button onClick={() => onSubmit(newText, imageFile)}>Submit</Button>\r\n          </>\r\n        )}\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}