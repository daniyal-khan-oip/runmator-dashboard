{"ast":null,"code":"var _jsxFileName = \"/Volumes/Data Drive/Daniyal/React/Runmator_Dashboard/src/examples/Navbars/DashboardNavbar/index.js\",\n    _s = $RefreshSig$();\n\n/**\n=========================================================\n*  \n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/material-dashboard-react\n* Copyright 2021 Creative Tim (https://www.creative-tim.com)\n\nCoded by www.creative-tim.com\n\n =========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n*/\nimport { useState, useEffect } from \"react\"; // react-router components\n\nimport { useLocation, Link } from \"react-router-dom\"; // prop-types is a library for typechecking of props.\n\nimport PropTypes from \"prop-types\"; // @material-ui core components\n\nimport AppBar from \"@mui/material/AppBar\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Menu from \"@mui/material/Menu\";\nimport Icon from \"@mui/material/Icon\"; // Material Dashboard 2 React components\n\nimport MDBox from \"components/MDBox\";\nimport MDInput from \"components/MDInput\"; // Material Dashboard 2 React example components\n\nimport Breadcrumbs from \"examples/Breadcrumbs\";\nimport NotificationItem from \"examples/Items/NotificationItem\"; // Custom styles for DashboardNavbar\n\nimport { navbar, navbarContainer, navbarRow, navbarIconButton, navbarMobileMenu } from \"examples/Navbars/DashboardNavbar/styles\"; // Material Dashboard 2 PRO React context\n\nimport { useMaterialUIController, setTransparentNavbar, setMiniSidenav, setOpenConfigurator } from \"context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction DashboardNavbar(_ref) {\n  _s();\n\n  let {\n    absolute,\n    light,\n    isMini\n  } = _ref;\n  const [navbarType, setNavbarType] = useState();\n  const [controller, dispatch] = useMaterialUIController();\n  const {\n    miniSidenav,\n    transparentNavbar,\n    fixedNavbar,\n    openConfigurator,\n    darkMode\n  } = controller;\n  const [openMenu, setOpenMenu] = useState(false);\n  const route = useLocation().pathname.split(\"/\").slice(1);\n  useEffect(() => {\n    // Setting the navbar type\n    if (fixedNavbar) {\n      setNavbarType(\"sticky\");\n    } else {\n      setNavbarType(\"static\");\n    } // A function that sets the transparent state of the navbar.\n\n\n    function handleTransparentNavbar() {\n      setTransparentNavbar(dispatch, fixedNavbar && window.scrollY === 0 || !fixedNavbar);\n    }\n    /** \n     The event listener that's calling the handleTransparentNavbar function when \n     scrolling the window.\n    */\n\n\n    window.addEventListener(\"scroll\", handleTransparentNavbar); // Call the handleTransparentNavbar function to set the state with the initial value.\n\n    handleTransparentNavbar(); // Remove event listener on cleanup\n\n    return () => window.removeEventListener(\"scroll\", handleTransparentNavbar);\n  }, [dispatch, fixedNavbar]);\n\n  const handleMiniSidenav = () => setMiniSidenav(dispatch, !miniSidenav);\n\n  const handleConfiguratorOpen = () => setOpenConfigurator(dispatch, !openConfigurator);\n\n  const handleOpenMenu = event => setOpenMenu(event.currentTarget);\n\n  const handleCloseMenu = () => setOpenMenu(false); // Render the notifications menu\n\n\n  const renderMenu = () => /*#__PURE__*/_jsxDEV(Menu, {\n    anchorEl: openMenu,\n    anchorReference: null,\n    anchorOrigin: {\n      vertical: \"bottom\",\n      horizontal: \"left\"\n    },\n    open: Boolean(openMenu),\n    onClose: handleCloseMenu,\n    sx: {\n      mt: 2\n    },\n    children: [/*#__PURE__*/_jsxDEV(NotificationItem, {\n      icon: /*#__PURE__*/_jsxDEV(Icon, {\n        children: \"email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 31\n      }, this),\n      title: \"Check new messages\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NotificationItem, {\n      icon: /*#__PURE__*/_jsxDEV(Icon, {\n        children: \"podcasts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 31\n      }, this),\n      title: \"Manage Podcast sessions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NotificationItem, {\n      icon: /*#__PURE__*/_jsxDEV(Icon, {\n        children: \"shopping_cart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 31\n      }, this),\n      title: \"Payment successfully completed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this); // Styles for the navbar icons\n\n\n  const iconsStyle = _ref2 => {\n    let {\n      palette: {\n        dark,\n        white,\n        text\n      },\n      functions: {\n        rgba\n      }\n    } = _ref2;\n    return {\n      color: () => {\n        let colorValue = light || darkMode ? white.main : dark.main;\n\n        if (transparentNavbar && !light) {\n          colorValue = darkMode ? rgba(text.main, 0.6) : text.main;\n        }\n\n        return colorValue;\n      }\n    };\n  };\n\n  return /*#__PURE__*/_jsxDEV(AppBar, {\n    position: absolute ? \"absolute\" : navbarType,\n    color: \"inherit\",\n    sx: theme => navbar(theme, {\n      transparentNavbar,\n      absolute,\n      light,\n      darkMode\n    }),\n    children: /*#__PURE__*/_jsxDEV(Toolbar, {\n      sx: theme => navbarContainer(theme),\n      children: /*#__PURE__*/_jsxDEV(MDBox, {\n        color: \"inherit\",\n        mb: {\n          xs: 1,\n          md: 0\n        },\n        sx: theme => navbarRow(theme, {\n          isMini\n        }),\n        children: /*#__PURE__*/_jsxDEV(Breadcrumbs, {\n          icon: \"home\",\n          title: route[route.length - 1],\n          route: route,\n          light: light\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n} // Setting default values for the props of DashboardNavbar\n\n\n_s(DashboardNavbar, \"C3W4+gvwLxd9uKcRodv/aA6I1Qw=\", false, function () {\n  return [useMaterialUIController, useLocation];\n});\n\n_c = DashboardNavbar;\nDashboardNavbar.defaultProps = {\n  absolute: false,\n  light: false,\n  isMini: false\n}; // Typechecking props for the DashboardNavbar\n\nDashboardNavbar.propTypes = {\n  absolute: PropTypes.bool,\n  light: PropTypes.bool,\n  isMini: PropTypes.bool\n};\nexport default DashboardNavbar;\n\nvar _c;\n\n$RefreshReg$(_c, \"DashboardNavbar\");","map":{"version":3,"sources":["/Volumes/Data Drive/Daniyal/React/Runmator_Dashboard/src/examples/Navbars/DashboardNavbar/index.js"],"names":["useState","useEffect","useLocation","Link","PropTypes","AppBar","Toolbar","IconButton","Menu","Icon","MDBox","MDInput","Breadcrumbs","NotificationItem","navbar","navbarContainer","navbarRow","navbarIconButton","navbarMobileMenu","useMaterialUIController","setTransparentNavbar","setMiniSidenav","setOpenConfigurator","DashboardNavbar","absolute","light","isMini","navbarType","setNavbarType","controller","dispatch","miniSidenav","transparentNavbar","fixedNavbar","openConfigurator","darkMode","openMenu","setOpenMenu","route","pathname","split","slice","handleTransparentNavbar","window","scrollY","addEventListener","removeEventListener","handleMiniSidenav","handleConfiguratorOpen","handleOpenMenu","event","currentTarget","handleCloseMenu","renderMenu","vertical","horizontal","Boolean","mt","iconsStyle","palette","dark","white","text","functions","rgba","color","colorValue","main","theme","xs","md","length","defaultProps","propTypes","bool"],"mappings":"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","sourcesContent":["/**\n=========================================================\n*  \n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/material-dashboard-react\n* Copyright 2021 Creative Tim (https://www.creative-tim.com)\n\nCoded by www.creative-tim.com\n\n =========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n*/\n\nimport { useState, useEffect } from \"react\";\n\n// react-router components\nimport { useLocation, Link } from \"react-router-dom\";\n\n// prop-types is a library for typechecking of props.\nimport PropTypes from \"prop-types\";\n\n// @material-ui core components\nimport AppBar from \"@mui/material/AppBar\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Menu from \"@mui/material/Menu\";\nimport Icon from \"@mui/material/Icon\";\n\n// Material Dashboard 2 React components\nimport MDBox from \"components/MDBox\";\nimport MDInput from \"components/MDInput\";\n\n// Material Dashboard 2 React example components\nimport Breadcrumbs from \"examples/Breadcrumbs\";\nimport NotificationItem from \"examples/Items/NotificationItem\";\n\n// Custom styles for DashboardNavbar\nimport {\n  navbar,\n  navbarContainer,\n  navbarRow,\n  navbarIconButton,\n  navbarMobileMenu,\n} from \"examples/Navbars/DashboardNavbar/styles\";\n\n// Material Dashboard 2 PRO React context\nimport {\n  useMaterialUIController,\n  setTransparentNavbar,\n  setMiniSidenav,\n  setOpenConfigurator,\n} from \"context\";\n\nfunction DashboardNavbar({ absolute, light, isMini }) {\n  const [navbarType, setNavbarType] = useState();\n  const [controller, dispatch] = useMaterialUIController();\n  const { miniSidenav, transparentNavbar, fixedNavbar, openConfigurator, darkMode } = controller;\n  const [openMenu, setOpenMenu] = useState(false);\n  const route = useLocation().pathname.split(\"/\").slice(1);\n\n  useEffect(() => {\n    // Setting the navbar type\n    if (fixedNavbar) {\n      setNavbarType(\"sticky\");\n    } else {\n      setNavbarType(\"static\");\n    }\n\n    // A function that sets the transparent state of the navbar.\n    function handleTransparentNavbar() {\n      setTransparentNavbar(dispatch, (fixedNavbar && window.scrollY === 0) || !fixedNavbar);\n    }\n\n    /** \n     The event listener that's calling the handleTransparentNavbar function when \n     scrolling the window.\n    */\n    window.addEventListener(\"scroll\", handleTransparentNavbar);\n\n    // Call the handleTransparentNavbar function to set the state with the initial value.\n    handleTransparentNavbar();\n\n    // Remove event listener on cleanup\n    return () => window.removeEventListener(\"scroll\", handleTransparentNavbar);\n  }, [dispatch, fixedNavbar]);\n\n  const handleMiniSidenav = () => setMiniSidenav(dispatch, !miniSidenav);\n  const handleConfiguratorOpen = () => setOpenConfigurator(dispatch, !openConfigurator);\n  const handleOpenMenu = (event) => setOpenMenu(event.currentTarget);\n  const handleCloseMenu = () => setOpenMenu(false);\n\n  // Render the notifications menu\n  const renderMenu = () => (\n    <Menu\n      anchorEl={openMenu}\n      anchorReference={null}\n      anchorOrigin={{\n        vertical: \"bottom\",\n        horizontal: \"left\",\n      }}\n      open={Boolean(openMenu)}\n      onClose={handleCloseMenu}\n      sx={{ mt: 2 }}\n    >\n      <NotificationItem icon={<Icon>email</Icon>} title=\"Check new messages\" />\n      <NotificationItem icon={<Icon>podcasts</Icon>} title=\"Manage Podcast sessions\" />\n      <NotificationItem icon={<Icon>shopping_cart</Icon>} title=\"Payment successfully completed\" />\n    </Menu>\n  );\n\n  // Styles for the navbar icons\n  const iconsStyle = ({ palette: { dark, white, text }, functions: { rgba } }) => ({\n    color: () => {\n      let colorValue = light || darkMode ? white.main : dark.main;\n\n      if (transparentNavbar && !light) {\n        colorValue = darkMode ? rgba(text.main, 0.6) : text.main;\n      }\n\n      return colorValue;\n    },\n  });\n\n  return (\n    <AppBar\n      position={absolute ? \"absolute\" : navbarType}\n      color=\"inherit\"\n      sx={(theme) => navbar(theme, { transparentNavbar, absolute, light, darkMode })}\n    >\n      <Toolbar sx={(theme) => navbarContainer(theme)}>\n        <MDBox color=\"inherit\" mb={{ xs: 1, md: 0 }} sx={(theme) => navbarRow(theme, { isMini })}>\n          <Breadcrumbs icon=\"home\" title={route[route.length - 1]} route={route} light={light} />\n        </MDBox>\n        {/* {isMini ? null : (\n          <MDBox sx={(theme) => navbarRow(theme, { isMini })}>\n            <MDBox pr={1}>\n              <MDInput label=\"Search here\" />\n            </MDBox>\n            <MDBox color={light ? \"white\" : \"inherit\"}>\n              <Link to=\"/authentication/sign-in/basic\">\n                <IconButton sx={navbarIconButton} size=\"small\" disableRipple>\n                  <Icon sx={iconsStyle}>account_circle</Icon>\n                </IconButton>\n              </Link>\n              <IconButton\n                size=\"small\"\n                disableRipple\n                color=\"inherit\"\n                sx={navbarMobileMenu}\n                onClick={handleMiniSidenav}\n              >\n                <Icon sx={iconsStyle} fontSize=\"medium\">\n                  {miniSidenav ? \"menu_open\" : \"menu\"}\n                </Icon>\n              </IconButton>\n              <IconButton\n                size=\"small\"\n                disableRipple\n                color=\"inherit\"\n                sx={navbarIconButton}\n                onClick={handleConfiguratorOpen}\n              >\n                <Icon sx={iconsStyle}>settings</Icon>\n              </IconButton>\n              <IconButton\n                size=\"small\"\n                disableRipple\n                color=\"inherit\"\n                sx={navbarIconButton}\n                aria-controls=\"notification-menu\"\n                aria-haspopup=\"true\"\n                variant=\"contained\"\n                onClick={handleOpenMenu}\n              >\n                <Icon sx={iconsStyle}>notifications</Icon>\n              </IconButton>\n              {renderMenu()}\n            </MDBox>\n          </MDBox>\n        )} */}\n      </Toolbar>\n    </AppBar>\n  );\n}\n\n// Setting default values for the props of DashboardNavbar\nDashboardNavbar.defaultProps = {\n  absolute: false,\n  light: false,\n  isMini: false,\n};\n\n// Typechecking props for the DashboardNavbar\nDashboardNavbar.propTypes = {\n  absolute: PropTypes.bool,\n  light: PropTypes.bool,\n  isMini: PropTypes.bool,\n};\n\nexport default DashboardNavbar;\n"]},"metadata":{},"sourceType":"module"}